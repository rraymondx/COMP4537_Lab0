import messages from '../../lang/messages/en/user.js';

// Button class represents each button in the game
class Button {
    constructor(id, number, color) {
        this.id = id;
        this.number = number;
        this.color = color;
        this.element = this.createButton();
        this.isInteractable = false;  // Flag to track if the button is clickable
    }

    // Creates a button element with id, text, color, and style
    createButton() {
        const button = document.createElement("button");
        button.id = this.id;
        button.textContent = this.number; // Show number when button is created
        button.style.backgroundColor = this.color;
        button.style.height = "5em";
        button.style.width = "10em";
        button.style.position = "absolute";
        button.addEventListener("click", () => this.handleClick());
        return button;
    }

    // Sets the button's position on the screen
    setPosition(x, y) {
        this.element.style.left = `${x}px`;
        this.element.style.top = `${y}px`;
    }

    // Hides the number on the button
    hideNumber() {
        this.element.textContent = "";
    }

    // Shows the number on the button
    showNumber() {
        this.element.textContent = this.number;
    }

    // Disables the button, making it non-interactive
    disable() {
        this.isInteractable = false;  // Disable interaction
        this.element.disabled = true; // Ensure button is visually disabled
    }

    // Enables the button, making it interactive
    enable() {
        this.isInteractable = true;  // Enable interaction
        this.element.disabled = false; // Ensure button is clickable
    }

    // Handles button click (does nothing if button is not interactable)
    handleClick() {
        // Ignore click if the button is not interactable
        if (!this.isInteractable) return;  
    }
}

// Scrambler class is responsible for moving buttons around and managing the game flow
class Scrambler {
    constructor(buttons, times) {
        this.buttons = buttons;
        this.times = times;
    }

    // Scrambles the button positions for a set number of times
    scrambleButtons() {
        let remainingTimes = this.times;
        // generated by ChatGPT
        const scrambleInterval = setInterval(() => {
            this.buttons.forEach((button) => {
                const x = Math.random() * (window.innerWidth - 150); // Random position within window width
                const y = Math.random() * (window.innerHeight - 100); // Random position within window height
                button.setPosition(x, y);
            });
            remainingTimes--;
            if (remainingTimes === 0) {
                clearInterval(scrambleInterval);
                // Enable interaction after scrambling is complete
                this.enableInteraction(); 
                this.hideNumbers()
            }
        }, 2000);
    }

    // Disables interaction for all buttons
    disableInteraction() {
        this.buttons.forEach((button) => button.disable()); // Disable all buttons
    }

    // Enables interaction for all buttons
    enableInteraction() {
        this.buttons.forEach((button) => button.enable()); // Enable all buttons
    }

    // Hides the numbers on all buttons
    hideNumbers() {
        this.buttons.forEach((button) => button.hideNumber()); // Hide numbers after scrambling
    }
}

// ButtonGame class manages the entire game, including button creation, interaction, and game logic
class ButtonGame {
    constructor() {
        this.buttons = [];
        this.originalOrder = [];
        this.currentOrderIndex = 0;
        this.startButton = document.getElementById("startButton");
        this.startButton.addEventListener("click", () => this.startGame());
    }

    // Starts the game when the start button is clicked
    startGame() {
        const count = parseInt(document.getElementById("buttonCount").value);
        if (isNaN(count) || count < 3 || count > 7) {
            alert(messages.INVALID_INPUT);
            return;
        }
        this.resetGame();
        this.createButtons(count);
        this.displayButtons();

        // Disable all buttons right after creation (before scrambling starts)
        this.buttons.forEach(button => button.disable());

        // Scramble buttons after a delay based on count
        setTimeout(() => {
            const scrambler = new Scrambler(this.buttons, count);
            scrambler.scrambleButtons();
            // Disable interaction during scrambling
            scrambler.disableInteraction(); 
        }, count * 1000);
    }

    // Resets the game by removing existing buttons and resetting state
    resetGame() {
        // Clear existing buttons if any
        this.buttons.forEach(button => {
            button.element.remove(); // Remove button from DOM
        });

        this.buttons = [];
        this.originalOrder = [];
        this.currentOrderIndex = 0;
    }

    // Creates a specified number of buttons with random colors
    createButtons(count) {
        for (let i = 0; i < count; i++) {
            const color = `#${Math.floor(Math.random() * 16777215).toString(16)}`;
            const button = new Button(`button-${i}`, i + 1, color);
            this.buttons.push(button);
            this.originalOrder.push(button);
            // button event listener
            button.element.addEventListener("click", () => this.handleButtonClick(button));
        }
    }

    // Displays the buttons on the screen in a row
    displayButtons() {
        let x = 10;
        const y = 50;
        this.buttons.forEach((button) => {
            button.setPosition(x, y);
            document.body.appendChild(button.element);
            x += 150; // Keep buttons in a row
        });
    }

    // Enables the memory test by showing the numbers again and enabling interaction
    enableMemoryTest() {
        this.buttons.forEach((button) => button.showNumber()); // Show the number again if needed
        // Enable interaction after scrambling
        this.buttons.forEach((button) => button.enable());
    }

    // Handles button click event
    handleButtonClick(button) {
        // If clicked in the wrong order, end the game and reveal the correct order
        if (button !== this.originalOrder[this.currentOrderIndex]) {
            alert(messages.WRONG_ORDER);
            this.revealCorrectOrder(); // Reveal correct order when wrong order is clicked
            this.endGame();
            return;
        }
    
        // If clicked in the correct order, show the number and increment the index
        button.showNumber();
        this.currentOrderIndex++;
    
        // If all buttons have been clicked correctly, finish the game
        if (this.currentOrderIndex === this.originalOrder.length) {
            alert(messages.EXCELLENT_MEMORY);
            this.endGame();
        }
    }    

    // Ends the game by disabling all buttons
    endGame() {
        // Disable all buttons and stop the game
        this.buttons.forEach(button => button.disable());
    }

    // Reveals the correct order of buttons
    revealCorrectOrder() {
        this.originalOrder.forEach((button) => button.showNumber());
    }    
}

// Instantiate and start the game
new ButtonGame();
